class Solution(object):
    def shortestPathBinaryMatrix(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        if grid[0][0]>0:
            return -1
        queue=[(0,0)]
        distance=0
        directions = [
            (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
        nrow=len(grid)
        ncol=len(grid[0])
        grid[0][0]=1
        def find_next(row,col):
            for x,y in directions:
                new_x=row+x
                new_y=col+y
                if new_x<0 or new_x>=nrow or new_y<0 or new_y>=ncol:
                    continue
                if grid[new_x][new_y]>0:
                    continue
                queue.append((new_x,new_y))
                grid[new_x][new_y]=grid[row][col]+1
        while len(queue)>0:
            cur_x,cur_y=queue.pop(0)
            if cur_x==nrow-1 and cur_y==ncol-1:
                return grid[cur_x][cur_y]
            find_next(cur_x,cur_y)
        return -1
