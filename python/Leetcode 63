class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        m=len(obstacleGrid)
        n=len(obstacleGrid[0])
        if(obstacleGrid[m-1][n-1]==1):
            return(0)
        grid=[[0]*n for _ in range(m)]
        grid[m-1][n-1]=1
        for j in reversed(range(n-1)):
            if(obstacleGrid[m-1][j]==0):
                grid[m-1][j]=grid[m-1][j+1]
            else:
                grid[m-1][j]=0
        for i in reversed(range(m-1)):
            if(obstacleGrid[i][n-1]==0):
                grid[i][n-1]=grid[i+1][n-1]
            else:
                grid[i][n-1]=0
        for i in reversed(range(m-1)):
            for j in reversed(range(n-1)):
                if(obstacleGrid[i][j]==1):
                    grid[i][j]=0
                else:
                    grid[i][j]=grid[i+1][j]+grid[i][j+1]
        return(grid[0][0])
