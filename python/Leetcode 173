# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator(object):

    def __init__(self, root):
        """
        :type root: TreeNode
        """
        self.index=-1
        self.stack=[]
        self.traverse(root)
        
    def traverse(self,root):
        if root is None:
            return None
        self.traverse(root.left)
        self.stack.append(root.val)
        self.traverse(root.right)

    def next(self):
        """
        :rtype: int
        """
        self.index+=1
        return self.stack[self.index]
        
    def hasNext(self):
        """
        :rtype: bool
        """
        return self.index+1<len(self.stack)


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
