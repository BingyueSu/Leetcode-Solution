################
#Kruskal
################
class UnionFind:
    def __init__(self,size):
        self.group=[0]*size
        for i in range(size):
            self.group[i]=i
    def find(self,node):
        if self.group[node]!=node:
            self.group[node]=self.find(self.group[node])
        return self.group[node]
    def join(self,n1,n2):
        group1 = self.find(n1)
        group2 = self.find(n2)
        if group1 == group2:
            return False
        self.group[group1]=group2
        return True
    
class Solution(object):
    def minCostConnectPoints(self, points):
        """
        :type points: List[List[int]]
        :rtype: int
        """
        n=len(points)
        all_edges=[]
        for i in range(n):
            for j in range(i+1,n):
                weight=abs(points[i][0]-points[j][0])+abs(points[i][1]-points[j][1])
                all_edges.append((weight,i,j))
        all_edges.sort()
        uf=UnionFind(n)
        total_cost=0
        num_edge=0
        for weight,n1,n2 in all_edges:
            if uf.join(n1,n2):
                total_cost+=weight
                num_edge+=1
                if num_edge==n-1:
                    break
        return total_cost


################
#Prim
################
class Solution(object):
    def minCostConnectPoints(self, points):
        """
        :type points: List[List[int]]
        :rtype: int
        """
        num_edge=0
        total_cost=0
        n=len(points)
        is_connected=[False]*n
        heap=[(0,0)]
        while num_edge<n:
            curr_node=heapq.heappop(heap)
            curr_index=curr_node[1]
            if is_connected[curr_index]:
                continue
            is_connected[curr_index]=True
            num_edge+=1
            total_cost+=curr_node[0]
            for i in range(n):
                if not is_connected[i]:
                    weight=abs(points[curr_index][0]-points[i][0])+\
                            abs(points[curr_index][1]-points[i][1])
                    heapq.heappush(heap,(weight,i))
        return total_cost
