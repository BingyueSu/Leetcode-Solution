# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        path=set()
        now=head
        while(now is not None):
            if(now in path):
                return(now)
            path.add(now)
            now=now.next
        return None
        
class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if(not head):
            return None
        slow=head.next
        if(not slow or not slow.next):
            return None
        fast=head.next.next
        while(slow!=fast):
            slow=slow.next
            fast=fast.next.next
            if(fast is None or fast.next is None):
                return None
        slow=head
        while(slow!=fast):
            slow=slow.next
            fast=fast.next
        return fast
