# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        point=head
        address=[]
        while(point):
            if(id(point) in address):
                return True
            address.append(id(point))
            point=point.next   
        return False
        
class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        slow=head
        if(slow):
            fast=head.next
        else:
            return(False)
        while(slow!=fast):
            if(fast is None or fast.next is None):
                return False
            slow=slow.next
            fast=fast.next.next
        return True
